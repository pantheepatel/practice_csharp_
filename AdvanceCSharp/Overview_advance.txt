List
works: same as arrayList but it is generic collection and bound to have same type of data
	initialization : 
			List<T>(): This constructor is used to create an instance of the List<T> class that is empty and has the default initial capacity.
			List<T>(IEnumerable): This constructor is used to create an instance of the List<T> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.
			List<T>(Int32): This constructor is used to create an instance of the List<T> class that is empty and has the specified initial capacity.
	- ArrayList: non-generic type of collection. represents an ordered collection of an object that can be indexed individually.
		use: to create a dynamic array means the size of the array increase or decrease automatically
		inherits Object Class.
		implements IEnumerable, ICollection, IList, ICloneable interfaces
		why not: can't have multidimensional array, it's not type safe
		initialization: ArrayList(),ArrayList(Int32),ArrayList(ICollection)
		Extra: You can also create the object of ArrayList class using the IEnumerable, ICollection, and IList interfaces but some methods of ArrayList class will not be applicable on them as they are not the members of these interfaces.
		Default methods: ArrayList(), ArrayList(ICollection), ArrayList(Int32), Capacity, Count, IsFixedSize, IsReadOnly, IsSynchronized, Item[Int32], SyncRoot, Adapter(IList), Add(Object), AddRange(ICollection), BinarySearch(Int32, Int32, Object, IComparer), BinarySearch(Object), BinarySearch(Object, IComparer), Clear(), Clone(), Contains(Object), CopyTo(Array), CopyTo(Array, Int32), CopyTo(Int32, Array, Int32, Int32), Equals(Object), FixedSize(ArrayList), FixedSize(IList), GetEnumerator(), GetEnumerator(Int32, Int32), GetHashCode(), GetRange(Int32, Int32), GetType(), IndexOf(Object), IndexOf(Object, Int32), IndexOf(Object, Int32, Int32), Insert(Int32, Object), InsertRange(Int32, ICollection), LastIndexOf(Object), LastIndexOf(Object, Int32), LastIndexOf(Object, Int32, Int32), MemberwiseClone(), ReadOnly(ArrayList), ReadOnly(IList), Remove(Object), RemoveAt(Int32), RemoveRange(Int32, Int32), Repeat(Object, Int32), Reverse(), Reverse(Int32, Int32), SetRange(Int32, ICollection), Sort(), Sort(IComparer), Sort(Int32, Int32, IComparer), Synchronized(ArrayList), Synchronized(IList), ToArray(), ToArray(Type), ToString(), TrimToSize()

Hashtable : collection that stores key-value pairs, it is non-generic
It uses a hash code to organize the keys for efficient data retrieval. The key can be any object, and each key is associated with a corresponding value. 
	in hashtable:
	 - the key cannot be null, but the value can be null.
	 - key objects must be immutable as long as they are used as keys in the Hashtable.
	 - can store elements of different types.
	 - key must be unique.
	 - The elements of Hashtable that are key-value pair is stored as DictionaryEntry objects.
IMPORTANT: don't use HashTable(non-generic) class now, instead use Dictionary(generic)

Dictionary: collection that stores key-value pairs, it is generic

Generics: it is a class which allows the user to define classes and methods with the placeholder
	features:
		It helps you in code reuse, performance and type safety.
		create your own generic classes, methods, interfaces and delegates.
		create generic collection classes. The .NET framework class library contains many new generic collection classes in System.Collections.Generic namespace.
		get information on the types used in generic data type at run-time.
	advantages:
		You can use a single generic type definition for multiple purposes in the same code without any alterations.
		provide better type safety, especially in the case of collections. 
		perform better than normal system types because they reduce the need for boxing, unboxing, and type casting the variables or objects. 
	built-in generic types, such as List<T>, Dictionary<TKey, TValue>, and Nullable<T>.


** pipeline between the Event Raiser and Event Handler and we call that pipeline a Delegate.
IMPORTANT: signature(Access Modifier, Return Type, Number, Type, Order of Parameters) of the delegate and the method it points should be the same.
Event raiser --> Pipeline(delegate(with args/no args)) refer to obj that is going to handle event --> Event Handler
Events: are notifications. signals occurance of action.
	provides way to trigger noti from end users or object
	obj which triggers event doen't need to know which obj is going to handle it
	Event args: arguments that are passed within event
		used to encapulate event data
Delegates: is an object which refers to a method or it is a reference type variable that can hold a reference to the methods. It's special type of class.
	without delegate event would not be useful at all.
Event handler: who handles triggered event.(receive and process data)
	that contains 2 args; 1.sender 2.eventArgs

Extension Methods: Allows adding new methods to existing types without modifying their code.
	Defined in a static class also Method itself must be static
	First parameter uses this keyword to specify which type it extends
	Called like an instance method of the extended type
	Doesn't modify the original class(doesn't override base class of String,Int,...)
	Cann't override default method of base class, only can add new methods







TODO
generics in c#
An Overview of Events
Delegates
Events Redux



Questions
how the capacity of arraylist is calculated
difference between contains and containskey in hashtable
hashset
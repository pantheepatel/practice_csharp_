document for Visual Studio, C# compilation, .NET
https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/coding-style/identifier-names

.NET 7+ <- C#11
.NET 8+ <- C#12 -- stable and currently using it
.NET 9+ <- C#13

Q. what is .NET?
.NET is a free, cross-platform, open-source developer platform for building a broad range of applications, including desktop, web, and mobile. It supports multiple programming languages.
	-- disadvantages: memory-leak, license cost of VS, require RunTime Environment
	-- alternative: 
	1.react/angular + node.js 
	2.Mono(open source implementation of Microsoft’s .NET Framework)
	3.java(with other frameworks like spring)

Q. What is Visual Studio?
It is a powerful developer tool that you can use to complete the entire development cycle in one place. It's a comprehensive integrated development environment (IDE) that you can use to write, edit, debug, and build code. Then deploy your app. 

Q. Why to use VS over others?
Visual Studio includes compilers, code completion tools, source control, extensions, and many other features to enhance every stage of the software development process.
	--> Workload-based installer - install only what you need
	Powerful coding tools and features - everything you need to build your apps in one place
	Multiple language support - code in C++, C#, JavaScript, TypeScript, Python, and more
	Cross-platform development - build apps for any platform
	Version control integration - collaborate on code with team mates
	AI-assisted development - write code more efficiently with AI assistance

Q. Hot Reload
	Use it to fix issues or make changes to the code on the fly and see the results without restarting the app.

Q. Coding Standards in C#
	1. Use language keywords for datatypes instead of the runtime types. For example, use string instead of System.String
	2. 'var' keyword is used to declare implicit type variables in C#, which means it tells the compiler to figure out the variable type at compilation time. A var variable must be initialized at the time of declaration. ​​var can contain any type of data.
	-- Interface names start with a capital I.
	-- Use "PascalCasing" when naming a class, interface, struct, or delegate type, constant names, both fields and local constants
	-- Use camelCase for method parameters and local variables.
	-- Private instance fields start with an underscore (_) and the remaining text is camelCased.
	-- Static fields start with s_

Q. Main method in C#
	first method that is invoked. entry point of program execution, if more than one main method then set startup project.

Q. top level statements
	-- are implicitly in the global namespace.

** You use the struct, class, interface, enum, and record constructs to create your own custom types. **

Q. Value type and reference type
	Types can derive from other types, called base types.
	Types that you define by using the struct keyword are value types; all the built-in numeric types are structs. Types that you define by using the class or record keyword are reference types. Reference types and value types have different compile-time rules, and different run-time behavior.
	A class is a reference type. When an object of the type is created, the variable to which the object is assigned holds only a reference to that memory. When the object reference is assigned to a new variable, the new variable refers to the original object. Changes made through one variable are reflected in the other variable because they both refer to the same data.
	A struct is a value type. When a struct is created, the variable to which the struct is assigned holds the struct's actual data. When the struct is assigned to a new variable, it's copied. The new variable and the original variable therefore contain two separate copies of the same data. Changes made to one copy don't affect the other copy.

Q. compile time and runtime types

Q.
The using keyword can be used so that the complete name isn't required. like using System; so you can write Console.Write(); instead of System.Console.Write()
	The using directive obviates the requirement to specify the name of the namespace for every class. like namespace.class
public private protected internal static abstract virtual override sealed; protected internal, protected private
non static member of class can not be accessed via static block of class
'virtual' or 'absract' members can not be 'private'
can not create instance of 'abstract class' or 'interface'
https://learn.microsoft.com/en-us/visualstudio/ide
https://learn.microsoft.com/en-us/dotnet/navigate/tools-diagnostics/
https://learn.microsoft.com/en-us/dotnet/csharp/
https://www.geeksforgeeks.org/access-modifiers-in-c-sharp/
https://www.geeksforgeeks.org/string-format-method-in-c-sharp-with-examples-set-1/
https://devblogs.microsoft.com/visualstudio/
https://www.geeksforgeeks.org/c-sharp-method-parameters/

method types: https://www.csharp.com/article/type-of-methods-in-c-sharp/

Q. What is OOP?
Object-oriented programming aims to implement real-world entities like inheritance, hiding, polymorphism, etc in programming. The main aim of OOP is to bind together the data and the functions that operate on them so that no other part of the code can access this data except that function.

Q. Class:
A class is a user-defined data type. It consists of data members and member functions, which can be accessed and used by creating an instance of that class. It represents the set of properties or methods that are common to all objects of one type. A class is like a blueprint for an object.
Constructors in Csharp are special methods that are executed when an object is created.

Q. Variables: (non-static/instance, static, constant, readOnly)
	1. static - using 'static' keyword or inside any 'static block'
		-- initialized once execution of class starts
		::IMPORTANT:: 
		-- in the life cycle of class; static var is initialized only once.
	2. non static/instance - which are not static, need to make instance of class to initialize them
		-- they are given memory allocation when you initialize them
	3. constant - can't modified after declaration, so it's must to initialize while declaring. keyword "const"
		::IMPORTANT:: 
		-- in the life cycle of class; constant var is initialized only once.
		-- static var can be modified/override but constant can not
		-- both are assigned memory only once, not related to instance of class
	4. read only - can't modified after initialization. keyword "readonly"
		-- similar to nonStatic; ie, initialized only after creating instance of class and once for each instance of class.
		-- constant is fixed for whole class but readonly is fixed for instance of class
		
Q. Anonymous types provide a convenient way to encapsulate a set of read-only properties into a single object without having to explicitly define a type first.The type name is generated by the compiler and is not available at the source code level. The type of each property is inferred by the compiler.

Q. Instance vs Static vs Reference Members in Class (by default all members in class are instance members)
Instance Members: These members belong to a specific instance of the class and may only be accessed by constructing a class object.
Static Members: Belong to the class itself and can be accessed without generating a new instance of the class.

Q. class Varible vs class Instance(obj) vs class Reference(obj to other var/obj)
variable: copy of class which is not initialized
instance: copy of class which is initialized(using new keyword) which has own memory(not shared)
reference: copy of class which is initialized(using existing instance/obj) which won't have own memory(shared)
	reference of class can be called as pointer to the instance

Q. object:
It is a basic unit of Object-Oriented Programming and represents the real-life entities. used to access/use fields/methods of class.

Q. method:
A method is a block of code that performs a specific task. It can be executed when called, and it may take inputs, process them, and return a result. Methods can be defined within classes and are used to break down complex programs into simpler, modular pieces.
use - improve code organization, readability, and maintainability by promoting code reuse.
* sealed method: method that cannot be overridden by derived classes. It is used to prevent further modification of a method while still allowing inheritance.
	Cannot apply sealed on a non-overridden method.

Q. constructor:
it is special method of class used to initialize variable of class.
	does not have return type/value
	implicit(default-bcz no args)-public, explicit(default, parameterized, copy, static) add modifiers
		copy cons-want to use same value multiple time, creates new obj by coping the values of an existing obj.
		
Q. static constructor 
defined explicitly if no static member in non-static class. to define static members, they are never explicitly called always implicit calling. so they have only 'private' access modifier.
	they are not parameterized, no overloading, 1st to execute when class is first used(even before main method if in class)
subQ. non-static/instance of constructor are implicit in every class(except static class), 'public' access modifier

Q. sealed class - no inheritance but can create instance
   private constructor - no inheritance and no instance creation(outside class)
   protected constructor - inheritance but no instance creation
   internal constructor - Only accessible within the same assembly, Prevents object creation from external assemblies.
   static constuctor - Runs only once when the class is first loaded into memory. Does not take parameters.

Q. pillars of oops
	1 Abstraction: Data abstraction refers to providing only essential information about the data to the outside world, hiding the background details or implementation.
		achieve: using 'abstract' keyword
	2 Encapsulation: defined as the wrapping up of data under a single unit.
	the data in a class is hidden from other classes, so it is also known as data-hiding.
		achieve: using 'private' access modifier
			you can use getter/setter to get/set value of this variable
	3 Inheritance: capability of a class to derive properties and characteristics from another class is called Inheritance.
		Use: allows the user to reuse the code whenever possible and reduce its redundancy.
		achieve: using ':' in C#
			types of inheritance(in-general): 1.Single 2.multiple 3.multi-level 4.hierarchical 5.hybrid
			types of inheritance(in C# for class): 1.Single 2.multi-level 3.hierarchical (others can be achieved using Interfaces)
				because of ambiguity problem
			**	when class is being inherit it is to consume method whereas when interface is being implemented it is to being implement method/member
			types of inheritance(in C# for interface): 4.multiple 5.hybrid
		just like super() in java in C# we use base()
	4 Polymorphism: polymorphism means having many forms.
		achieve: methodOverloading and methodOverriding
			1. methodOverloading - same class, same method name, compiletime polymorphism
			2. methodOverriding - parent and child class, same method name, runtime polymorphism
				use keywords, virtual(parent class method), override(child class method), most important when you make obj of child class and store it in type of parent class, so here if you haven't used these keywords then it will always call parent's method.

	difference between
	1. Abstraction is the process of hiding the working style of an object and showing the information about an object understandably.
	2. Encapsulation is enclosing the related operations and data related to an object into that object.
	3. Inheritance is a process of object reusability.
	4. Polymorphism is One function behaves in different forms.
	--> Abstraction solves the problem at the design level. whereas, Encapsulation solves the problem at the implementation level.

Q. abstraction:
	abstract method: method which does not contain body, only declaration
	abstract class: class which contains abstract method(also non-abstract members)

Q. Advantages of Using OOP
	Code reusability, Modularity, Scalability, Abstraction, Data hiding, Flexibility, Ease of Maintenance

Q. Access modifiers/specifiers - control the visibility of classes and their members.
	Public: from anyplace.
	Private: only within the class.
	Protected: within the class and its descendant classes.
		can use the member when you derive parent class of other project by giving reference of other project
	Internal: within the same assembly. Internal members are accessible only within files in the same assembly (.dll/.exe).
		member will not be accessible even if you have given reference of other project and derived that parent class
	protected internal: Only code in the same assembly or in a derived class in another assembly can access this type or member.
		can use member of other class when this class is derived from parent
	private protected: Only code in the same assembly and in the same class or a derived class can access the type or member.

Q. static-early-compileTime binding-method overloading
	reference type(parent) of variable determines which method is going to be called even though it is the instance of derived class(child class)
	ParentClass obj=new ChildClass();
	obj.method() --> will call the method of Parent only, also in here you can not use the methods of child class, it is like creating instance of parent class only

Q. dynamic-runTime binding-method overriding
	to make runtime binding we use virtual and override keyword to specify which method is overridden and which to use.

Q. what are interfaces in C#? user defined type which contains only abstract method in body
An interface in C# defines the contract to which a class must adhere. All methods in an interface are public abstract by default (that is, they have no implementation), and any class that implements the interface must supply implementations for all of the interface's methods.
	It describes methods and attributes but not their implementations.
	-- the default scope members of an interface is public but for class they are private.
	-- we can't declare any variables in interface, only methods

Q. Method Parameters:
	Named Parameters - connect according to name passed
	Ref Parameters - require initialization before passing
	Out Parameters - requires the method to assign a value to the parameter before it returns
	Default or Optional Parameters - given by default
	Dynamic Parameters - don't know the type of argument
	Value Parameters - normal way of passing value(copy of value is passed)
	Params - variable no of args(like ...args in js)

Q. enum/enumeration: user-defined type
set of named constant values.
directl under namespace, class, structure

Q. struct/structures: user-defined type
used in procedure lan like C, which are replaced by class in OOP lan.
struct can contain all things that class can contain(IN C# not other lan)
	(can contain - field, method, constructor, property, indexers, operator method,... )

Q. diff between class and struct
class - ref type, stored in heap, larger volume of data, predefined types(string, object,...), new is mandatory for creating instance, fields can be initialized at time of declaration
struct - value type, stored in stack, smaller volume of data, predefined types(Int32, float, boolean), can directly create instance, fields cannot be initialized at time of declaration, have to initialize fields of struct by calling constructor with 'new' keyword or explicitly setting them, can only have parameterized con(no default- they are always implicit)

Q. Partial
used - Classes, Structs, Interfaces, Methods
partial class(internal): is used to split the definition of a class, struct, interface, or method across multiple files. This allows developers to work on different parts of the same class in separate files without conflict.
	All partial class files must have the same namespace and class name.
		for destructuring, code generation, team collaboration
partial method(private): is declared in one part of a partial class and optionally implemented in another. If not implemented, it is removed at compile-time.

Q. Extern
The extern keyword is used to declare a method that is implemented outside the C# code (e.g., in an unmanaged DLL or assembly).
Declares a method implemented in an external DLL
used - Methods (with DllImport), Assembly Aliases, Warnings

Q. Immutability
Objects: are objects which once loaded cannot be changed/modified by anyway external/internal(no body can change data)
	used- master data, configuration data, singleton objects
	keyword- readonly

Q. new keyword
method with new keyword will behave same as when we don't use virtual and override(ie. will run the method whose reference is given)
	method with new keyword is called 'method hiding'
	use- When you don't want polymorphism but need a method with the same name in the derived class.
		When you want to provide a new implementation that does not replace the base class behavior.

Q. destructor and deconstructor
	1. destructor - ~ClassName(), runs when the garbage collector (GC) destroys an object.
		use - cleaning up unmanaged resources. only for class(only 1 destructor) NOT struct
	2. deconstructor - special method used for deconstructing an object into its individual properties.
		use - with tuples. Can have parameters. can be used in class and struct both.

Q. be default return statement is value type but you can have "ref return" statements "return ref numbers[i];"



Questions
	struct
	indexer
	operator method

	
demo and definition why using different types with access modifier other names difference, why that name only,
static keyword, class , member, constructor, what change, destructor? , why name of constructor same class, deep copy and shallow copy
symbol that its showing pass by reference
